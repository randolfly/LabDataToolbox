@page "/"
@using LabDataToolbox.Model
@using LabDataToolbox.Service
@using LabDataToolbox.Util
@inject AppConfigService AppConfigService
@inject AdsDataLogService AdsDataLogService


<MContainer>
    <MRow>
        <MCol Cols="10"
              Class="d-flex align-center justify-center">
            <MTextField @bind-Value="_search"
                        Label="Search Ads Symbols">
            </MTextField>
        </MCol>
        <MCol Cols="2" 
              Class="d-flex flex-column align-center justify-center">
            <MButton Outlined OnClick="OnLoadSymbolInfoTree">Load Symbols</MButton>
        </MCol>
        @if (_symbolInfoTrees.Count > 0)
        {
            <MCol Cols="12" Md="6">
                <MCard Class="mx-auto">
                    <MTreeview Id="symbolInfoTree" TItem="SymbolInfoTree" TKey="SymbolInfo"
                               @bind-Value="_recordSymbolInfos"
                               Selectable
                               Filter="RecordSymbolInfoFilter" Search="@_search"
                               Items="_symbolInfoTrees"
                               ItemText="r => r.SymbolInfo.Path"
                               ItemChildren="r => r.Children"
                               ItemKey="r => r.SymbolInfo">
                    </MTreeview>
                </MCard>
            </MCol>
            <MCol Cols="12" Md="6">
                <MCard Class="mx-auto">
                    <MList Dense>
                        <MListItemGroup
                            @bind-Values="GraphSymbolInfoName"
                            Multiple
                            Color="indigo">
                            @foreach (var symbol in _recordSymbolInfos)
                            {
                                <MListItem @key="symbol" Value="symbol.Path">
                                    <MListItemContent>
                                        <MListItemTitle>@symbol.Path</MListItemTitle>
                                    </MListItemContent>
                                </MListItem>
                            }
                        </MListItemGroup>
                    </MList>
                </MCard>
            </MCol>
        }
        
        
        <MCol Cols="12" Class="d-flex align-stretch justify-center">
            <AdsSettingDialog AppConfig="AppConfig"/>
            <MButton Class="ma-2" OnClick="OnConnectAdsServer"
                     Outlined
                     Color=@(AdsDataLogService.IsAdsPortReady ? "green" : "red")
                     Dark>
                @(AdsDataLogService.IsAdsPortReady ? "Disconnect" : "Connect")
            </MButton>
            <MButton Class="ma-2" OnClick="OnAdsLog"
                     Outlined
                     Color=@(_isAdsLogging ? "green" : "red")
                     Dark>
                @(_isAdsLogging ? "Stop Log" : "Start Log")
            </MButton>
            <MButton Outlined Class="ma-2" OnClick="SaveConfig">Save Configs</MButton>
            <MButton Outlined Class="ma-2" OnClick="LoadConfig">Load Configs</MButton>
        </MCol>
    </MRow>
</MContainer>

@code {
    private List<SymbolInfoTree> _symbolInfoTrees = new();
    private List<SymbolInfo> _recordSymbolInfos = new();

    private List<StringNumber> _graphSymbolInfoName = new();

    private List<StringNumber> GraphSymbolInfoName
    {
        get => _graphSymbolInfoName;
        set
        {
            OnGraphSymbolInfosChanged(value);
            _graphSymbolInfoName = value;
        }
    }
    private List<SymbolInfo> _graphSymbolInfos = new();

    private string _search = string.Empty;
    private bool _isAdsConnected;
    private bool _isAdsLogging;
    
    private AppConfig AppConfig { get; set; }
    private AdsConfig AdsConfig { get; set; }
    private DataLogConfig DataLogConfig { get; set; }

    protected override void OnInitialized()
    {
        LoadAppConfig();
    }
    
    #region Main Function

    private void OnConnectAdsServer()
    {
        if (!AdsDataLogService.IsAdsPortReady)
        {
            AdsDataLogService.ConnectAdsServer();
            _isAdsConnected = true;
        }
        else
        {
            if (!_isAdsConnected) return;
            AdsDataLogService.DisconnectAdsServer();
            _isAdsConnected = false;
        }
    }
    private async Task OnAdsLog()
    {
        if (!_isAdsLogging)
        {
            if (AdsDataLogService.IsAdsPortReady)
            {
                if (_recordSymbolInfos.Count >= 1)
                {
                    AdsDataLogService.RegisterNotification();
                    _isAdsLogging = true;
                }
            }
        }
        else
        {
            await AdsDataLogService.UnregisterNotification(
                AppConfigService.AppConfig.DataLogConfig.RecordFileFullName);
            _isAdsLogging = false;
        }
    }

    private void OnLoadSymbolInfoTree()
    {
        if (!AdsDataLogService.IsAdsPortReady) return;
        _symbolInfoTrees = AdsDataLogService.GetSymbolInfoTree();

        StateHasChanged();
    }
    
    private void LoadConfig()
    {
        if (!AdsDataLogService.IsAdsPortReady) return;
        if (_symbolInfoTrees.Count <= 0) return;
        AppConfigService.UpdateConfiguration();
        LoadAppConfig();

        var symbolInfos = new List<SymbolInfo>();
        foreach (var symbolInfoTree in _symbolInfoTrees)
        {
            symbolInfos.AddRange(symbolInfoTree.ConvertToSymbolInfo());
        }
        _recordSymbolInfos = symbolInfos.Where(
            symbolInfo =>
                DataLogConfig.RecordAdsSymbolName.Contains(symbolInfo.Path, StringComparer.CurrentCultureIgnoreCase)
            ).ToList();

        _graphSymbolInfos = _recordSymbolInfos.Where(
            symbolInfo =>
                DataLogConfig.GraphAdsSymbolName.Contains(symbolInfo.Path, StringComparer.CurrentCultureIgnoreCase))
            .ToList();

        GraphSymbolInfoName.Clear();
        _graphSymbolInfos.ForEach(info => { GraphSymbolInfoName.Add(info.Path); });

        StateHasChanged();
        SaveDataLogSymbolInfo();
    }
    private void SaveConfig()
    {
        var recordSymbolInfoName = _recordSymbolInfos.Select(s => s.Path).ToList();
        var graphSymbolInfoName = _graphSymbolInfos.Select(s => s.Path).ToList();
        DataLogConfig.GraphAdsSymbolName = graphSymbolInfoName;
        DataLogConfig.RecordAdsSymbolName = recordSymbolInfoName;
        AppConfigService.SaveConfiguration(AppConfig);
    }
    
    private void OnGraphSymbolInfosChanged(List<StringNumber> symbolInfoPaths)
    {
        _graphSymbolInfos = new List<SymbolInfo>();
        foreach (var symbolId in symbolInfoPaths)
        {
            _graphSymbolInfos.Add(_recordSymbolInfos.First(s => s.Path.Equals(symbolId.AsT0,
                StringComparison.CurrentCultureIgnoreCase)));
        }

        SaveDataLogSymbolInfo();
    }
    
    private Func<SymbolInfoTree, string, Func<SymbolInfoTree, string>, bool> RecordSymbolInfoFilter
    {
        get
        {
            return (item, search, textKey) => textKey(item).IndexOf(search,
                StringComparison.CurrentCultureIgnoreCase) > -1;
        }
    }


    #endregion

    #region Helper Functions

    
    private void SaveDataLogSymbolInfo()
    {
        AdsDataLogService.RecordSymbolInfos = _recordSymbolInfos;
        AdsDataLogService.GraphSymbolInfos = _graphSymbolInfos;
    }
   
    private void LoadAppConfig()
    {
        AppConfig = AppConfigService.AppConfig;
        DataLogConfig = AppConfigService.AppConfig.DataLogConfig;
        AdsConfig = AppConfigService.AppConfig.AdsConfig;
    }


    #endregion

}